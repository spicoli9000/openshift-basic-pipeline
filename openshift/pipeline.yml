apiVersion: v1
kind: BuildConfig
metadata:
  name: product-catalog-pipeline
  namespace:
  labels:
    name: product-catalog-pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "product-catalog", "namespace": "product-catalog-dev", "kind": "DeploymentConfig"},{"name": "product-catalog", "namespace": "product-catalog-test", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    -
      type: GitHub
      github:
        secret: secret101
    -
      type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: Git
    git:
      uri: 'https://github.com/spicoli9000/openshift-basic-pipeline'
      ref: master
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          agent none

          stages {

            stage('Build App') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject('product-catalog-dev') {
                      openshift.selector("bc", "product-catalog").startBuild("--wait=true")
                    }
                  }
                }
              }
            }

            stage('Deploy in Dev') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject('product-catalog-dev') {
                      def dc = openshift.selector("dc", "product-catalog")
                      dc.rollout().latest();
                      dc.rollout().status();
                    }
                  }
                }
              }
            }

            stage('Test') {
              steps {
                script {
                  try {
                    sh "curl -s --head --request GET http://product-catalog.product-catalog-dev:8080/health.php | grep '200 OK'"
                    return true
                  } catch (Exception e) {
                    return false
                  }
                }
              }
            }

            stage('Approve') {
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to Test?", ok: "Promote"
                }
              }
            }

            stage('Deploy in Test') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject('product-catalog-test') {
                      openshift.tag("product-catalog-dev/product-catalog:latest", "product-catalog-test/product-catalog:latest")
                      def dc = openshift.selector("dc", "product-catalog")
                      dc.rollout().latest();
                      dc.rollout().status();
                    }
                  }
                }
              }
            }

          }
        }
  output:
  resources:
  postCommit:
